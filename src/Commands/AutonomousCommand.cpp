// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "AutonomousCommand.h"
#include "SetElevatorZeroPoint.h"
#include "AutonomousMove.h"
#include "GotoTote.h"
#include "GotoSlimTote.h"
#include "AutonomousStrafe.h"
#include "SetSetpoint.h"
#include "AutonomousTurn.h"
#include "GrabberstoOpen.h"
#include "GotoTrashcan.h"



#define ROBOT_SET_DISTANCE 60
#define ELEVATOR_MOVE_HEIGHT 7 //TODO: somewhat random numbers picked, need refining
#define TOTE_SET_DISTANCE 110


#define VERT_STACK_DIST 107
#define HOR_STACK_DIST 81
#define SLEEP_TIME 3
#define SECOND_SLEEP 7

AutonomousCommand::AutonomousCommand(){
	AddSequential(new GotoTote());
	AddSequential(new SetSetpoint(8.7513));
	AddSequential(new AutonomousMove(141.75));
}

AutonomousCommand::AutonomousCommand(AutonomousCommand::Command_t commandInput) {
	/*printf("The robot is in Autonomous\n");
	command = commandInput;
	AddSequential(new SetElevatorZeroPoint());

	switch (commandInput){
	case RobotSet:
		printf("The robot is in RobotSet\n");
		AddSequential(new AutonomousMove(ROBOT_SET_DISTANCE));
		break;
	case ToteSet:
		//AddSequential(new GrabbersToOpen());
		AddSequential(new GotoTote());
		AddSequential(new SetSetpoint(ELEVATOR_MOVE_HEIGHT));
		AddSequential(new AutonomousTurn(90));
		AddSequential(new AutonomousMove(TOTE_SET_DISTANCE));
		AddSequential(new SetSetpoint(3.5));
		AddSequential(new GrabbersToOpen());
		break;
	case ContainerSet:
		AddSequential(new GotoTrashcan());
		AddSequential(new SetSetpoint(ELEVATOR_MOVE_HEIGHT));
		AddSequential(new AutonomousTurn(90));
		AddSequential(new AutonomousMove(TOTE_SET_DISTANCE));
		AddSequential(new SetSetpoint(3.5));
		AddSequential(new GrabbersToOpen());
		break;
	case StepAttack:
		/* Step Attack is an Autonomous possibility that involves grabbing totes and recyclecans for
		 * the purpose of the game more than scoring in autonomous
		 *
		 * the many magical numbers below are pre-calculated distances, measurements, and turning
		 * degrees necessary to get the desired result
		 *
		 * the numbers are, for the most part, not interchangeable so this autonomous command
		 * will not be good for on the spot calculations at competition
		 */
/*		AddSequential(new AutonomousMove(51)); //
		AddSequential(new AutonomousTurn(90)); //
		AddSequential(new AutonomousMove(27.6)); //
		AddSequential(new GotoSlimTote()); //
		AddSequential(new AutonomousTurn(80));
		AddSequential(new GrabbersToOpen());
		AddSequential(new AutonomousTurn(-80));
		AddSequential(new AutonomousMove(16.9));
		AddSequential(new AutonomousTurn(30));
		AddSequential(new AutonomousMove(6));
		AddSequential(new AutonomousTurn(30));
		AddSequential(new AutonomousMove(6));
		AddSequential(new AutonomousTurn(30));
		AddSequential(new AutonomousMove(36));
		AddSequential(new AutonomousTurn(-180));
		AddSequential(new SetSetpoint(ELEVATOR_MOVE_HEIGHT));
		AddSequential(new AutonomousMove(12));
		AddSequential(new GotoTrashcan());
		AddSequential(new AutonomousMove(-24));
		AddSequential(new AutonomousTurn(-100));
		AddSequential(new AutonomousMove(27.6));
		AddSequential(new AutonomousTurn(-80));
		AddSequential(new AutonomousMove(120));
		//Todo: Test the values, test the turns, test the movements, map out each line and what they should do prior to competitoin
		break;

	case StackedToteSet: // Use other contrustor instead
	default:
		break;

	}
*/

}

/*AutonomousCommand::AutonomousCommand(uint8_t startPos, uint8_t stackLevel){
	command = StackedToteSet;
	AddSequential(new SetElevatorZeroPoint);
	switch (startPos){
	// the start positions are numbered based on which tote you would be picking up first from left to right (farthest left equaling 1)
		case 1:
			//Pick up the tote.
			AddSequential(new GotoSlimTote());
			AddSequential(new SetSetpoint(ELEVATOR_MOVE_HEIGHT));
			AddSequential(new AutonomousTurn(-90));
			// Turn to the left?
			AddSequential(new AutonomousMove(VERT_STACK_DIST));
			AddSequential(new AutonomousTurn(90));
			//turn
			//sleep?
			switch(stackLevel){
				// stack levels are which level the tote will be stacked on
				// Different sleep times are to wait for other robots
				case 1:
				AddSequential(new SetSetpoint(3.5)); //see OI.cpp
				AddSequential(new AutonomousMove(HOR_STACK_DIST));
				AddSequential(new GrabbersToOpen());
				AddSequential(new AutonomousMove(-HOR_STACK_DIST));
				break;
				case 2:
				AddSequential(new WaitCommand(SLEEP_TIME));
				AddSequential(new SetSetpoint(5.7513));
				AddSequential(new AutonomousMove(HOR_STACK_DIST));
				AddSequential(new GrabbersToOpen());
				AddSequential(new AutonomousMove(-HOR_STACK_DIST));

				break;
				case 3:
				AddSequential(new WaitCommand(SECOND_SLEEP));
				AddSequential(new SetSetpoint(17.8513));
				AddSequential(new AutonomousMove(HOR_STACK_DIST));
				AddSequential(new GrabbersToOpen());
				AddSequential(new AutonomousMove(-HOR_STACK_DIST));

				}
			break;
		case 2:
			AddSequential(new GotoSlimTote());
			AddSequential(new SetSetpoint(ELEVATOR_MOVE_HEIGHT));
			AddSequential(new AutonomousTurn(-90));
			AddSequential(new AutonomousMove(VERT_STACK_DIST-36));

			switch(stackLevel){
				case 1:
					AddSequential(new SetSetpoint(3.5));
					AddSequential(new AutonomousMove(36));  // 3 feet - a a decent distance from other robots
					AddSequential(new AutonomousTurn(90));
					AddSequential(new GrabbersToOpen());
					AddSequential(new AutonomousTurn(90));
					AddSequential(new AutonomousMove(24)); //yo dawg this might put you out of auto zone, change if so
					break;
				case 2:
					AddSequential(new WaitCommand(SLEEP_TIME));
					AddSequential(new SetSetpoint(5.7513));
					AddSequential(new AutonomousMove(36)); // 3 feet - a decent amount shy, as not to get in the way
					AddSequential(new AutonomousTurn(90));
					AddSequential(new GrabbersToOpen());
					AddSequential(new AutonomousTurn(90));
					AddSequential(new AutonomousMove(24));
					break;

				case 3:
                    AddSequential(new WaitCommand(SECOND_SLEEP));
                    AddSequential(new SetSetpoint(17.8513));
                    AddSequential(new AutonomousMove(36)); // 3 feet - a decent amount shy, as not to get in the way of robots
                    AddSequential(new AutonomousTurn(90));
                    AddSequential(new GrabbersToOpen());
                    AddSequential(new AutonomousTurn(90));
                    AddSequential(new AutonomousMove(24));

					}
			break;
		case 3:
			switch(stackLevel){
			//Pick up the tote.
			AddSequential(new GotoSlimTote());
			AddSequential(new SetSetpoint(ELEVATOR_MOVE_HEIGHT));
			AddSequential(new AutonomousTurn(90));
			// Turn to the left?
			AddSequential(new AutonomousMove(VERT_STACK_DIST));
			AddSequential(new AutonomousTurn(-90));
			//turn
			//sleep?
			case 1:
				AddSequential(new SetSetpoint(3.5)); //see OI.cpp
				AddSequential(new AutonomousMove(HOR_STACK_DIST));
				AddSequential(new GrabbersToOpen());
				AddSequential(new AutonomousMove(-HOR_STACK_DIST));
				break;
				case 2:
				AddSequential(new WaitCommand(SLEEP_TIME));
				AddSequential(new SetSetpoint(5.7513));
				AddSequential(new AutonomousMove(HOR_STACK_DIST));
				AddSequential(new GrabbersToOpen());
				AddSequential(new AutonomousMove(-HOR_STACK_DIST));

				break;
				case 3:
				AddSequential(new WaitCommand(SECOND_SLEEP));
				AddSequential(new SetSetpoint(17.8513));
				AddSequential(new AutonomousMove(HOR_STACK_DIST));
				AddSequential(new GrabbersToOpen());
				AddSequential(new AutonomousMove(-HOR_STACK_DIST));

				}
			break;

	}
}
*/
