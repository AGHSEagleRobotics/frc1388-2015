// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "WPILib.h"
#include "MoveElevator.h"

Joystick * opStick;
Robot robotInstance;
float joystickY;
bool isTopLimitHit, isBottomLimitHit;

MoveElevator::MoveElevator() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void MoveElevator::Initialize() {
	opStick = Robot::oi->getOpStick();
}

// Called repeatedly when this Command is scheduled to run
void MoveElevator::Execute() {

	//setting the values of the limit switches and joystick input on Y axis
	joystickY = opStick->GetY();
	isTopLimitHit = RobotMap::elevatorElevatorTopLimit->Get();
	isBottomLimitHit = RobotMap::elevatorElevatorBottomLimit->Get();

	//if we are already at the top and the operator wants to move up, talon power is set to 0.0, and if we are already at the bottom,
	//and the operator is trying to go down, talon power is set to 0.0
	if(robotInstance.signOf(joystickY) == -1 && isBottomLimitHit){
		RobotMap::elevatorElevatorTalon->Set(0.0);
	}else if(robotInstance.signOf(joystickY) == 1 && isTopLimitHit){
		RobotMap::elevatorElevatorTalon->Set(0.0);
	}else{
		RobotMap::elevatorElevatorTalon->Set(joystickY);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool MoveElevator::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void MoveElevator::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveElevator::Interrupted() {

}
