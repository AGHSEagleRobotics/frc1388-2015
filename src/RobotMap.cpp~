// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::elevatorElevatorTalon = NULL;
Encoder* RobotMap::elevatorElevatorEncoder = NULL;
DigitalInput* RobotMap::elevatorElevatorTopLimit = NULL;
DigitalInput* RobotMap::elevatorElevatorBottomLimit = NULL;
SpeedController* RobotMap::driveTrainleftfronttalon = NULL;
SpeedController* RobotMap::driveTrainleftbacktalon = NULL;
SpeedController* RobotMap::driveTrainrightfronttalon = NULL;
SpeedController* RobotMap::driveTrainrightbacktalon = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive41 = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	elevatorElevatorTalon = new Talon(0);
	lw->AddActuator("Elevator", "ElevatorTalon", (Talon*) elevatorElevatorTalon);
	
	elevatorElevatorEncoder = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Elevator", "ElevatorEncoder", elevatorElevatorEncoder);
	elevatorElevatorEncoder->SetDistancePerPulse(1.0);
        elevatorElevatorEncoder->SetPIDSourceParameter(Encoder::kRate);
	elevatorElevatorTopLimit = new DigitalInput(2);
	lw->AddSensor("Elevator", "ElevatorTopLimit", elevatorElevatorTopLimit);
	
	elevatorElevatorBottomLimit = new DigitalInput(3);
	lw->AddSensor("Elevator", "ElevatorBottomLimit", elevatorElevatorBottomLimit);
	
	driveTrainleftfronttalon = new Talon(1);
	lw->AddActuator("DriveTrain", "leftfronttalon", (Talon*) driveTrainleftfronttalon);
	
	driveTrainleftbacktalon = new Talon(3);
	lw->AddActuator("DriveTrain", "leftbacktalon ", (Talon*) driveTrainleftbacktalon);
	
	driveTrainrightfronttalon = new Talon(2);
	lw->AddActuator("DriveTrain", "rightfronttalon", (Talon*) driveTrainrightfronttalon);
	
	driveTrainrightbacktalon = new Talon(4);
	lw->AddActuator("DriveTrain", "rightbacktalon ", (Talon*) driveTrainrightbacktalon);
	
	driveTrainRobotDrive41 = new RobotDrive(driveTrainleftfronttalon, driveTrainleftbacktalon,
              driveTrainrightfronttalon, driveTrainrightbacktalon);
	
	driveTrainRobotDrive41->SetSafetyEnabled(true);
        driveTrainRobotDrive41->SetExpiration(0.1);
        driveTrainRobotDrive41->SetSensitivity(0.5);
        driveTrainRobotDrive41->SetMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
