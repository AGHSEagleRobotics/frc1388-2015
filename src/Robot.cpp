// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Elevator* Robot::elevator = 0;
DriveTrain* Robot::driveTrain = 0;
Grabbers* Robot::grabbers = 0;
OI* Robot::oi = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	GlobalInit();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	elevator = new Elevator();
	driveTrain = new DriveTrain();
	grabbers = new Grabbers();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS]

  }

void Robot::GlobalInit(){

}

void Robot::GlobalPeriodic(){
	if(GetUserButton()) {
		RobotMap::driveTrainGyro->Reset();
		RobotMap::driveTrainDefaultGyro->Reset();
	}
	float currentPosition = RobotMap::elevatorElevatorTalon->GetPosition();
	float insideLimit = RobotMap::grabbersGrabberCANTalon->IsFwdLimitSwitchClosed();
	float bottomLimit = RobotMap::elevatorElevatorTalon->IsRevLimitSwitchClosed();

	printf("Encoder: %f\n", currentPosition);


	if(insideLimit){
		RobotMap::grabbersGrabberCANTalon->SetPosition(0.0);
	}

	if(bottomLimit){
		RobotMap::elevatorElevatorTalon->SetPosition(0.0);
	}
}
/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
	GlobalPeriodic();
}

void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	GlobalPeriodic();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
	Robot::grabbers->ResetEncoder();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	GlobalPeriodic();
}

void Robot::TestPeriodic() {
	lw->Run();
}

float Robot::signOf(float number){
	if(number < 0){
		return -1.0;
	}
	return 1.0;
}

START_ROBOT_CLASS(Robot);

